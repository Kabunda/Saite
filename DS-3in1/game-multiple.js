// game-multiple.js

// –í –Ω–∞—á–∞–ª–æ game-multiple.js –¥–æ–±–∞–≤—å—Ç–µ
const APP_VERSION = '0.61';
const BUILD_TIME = '27.09.2025 02:18'; // –û–±–Ω–æ–≤–ª—è–π—Ç–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏

// –ò –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é displayVersion
function displayVersion() {
    const versionInfo = document.getElementById('versionInfo');
    if (versionInfo) {
        versionInfo.textContent = `v${APP_VERSION} (${BUILD_TIME})`;
        versionInfo.title = `–í–µ—Ä—Å–∏—è: ${APP_VERSION}, –°–±–æ—Ä–∫–∞: ${BUILD_TIME}`;
    }
}

// game-multiple.js - –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
import { 
  saveGameResult, 
  getHighscores,
  createSession,
  joinSession,
  getSession,
  subscribeToSession,
  updatePlayerProgress,
  startSession,
  endSession
} from './firebase.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let startTime;
let timerInterval;
let currentQuestion = 1;
let score = 0;
let answersHistory = [];
let playerName = "";
let gameDifficulty = "midle";
let questions = [];
let isGameActive = false;

// ... –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentSessionId = null;
let isHost = false;
let sessionUnsubscribe = null;
let players = [];
let gameStartTimeout = null;

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
const startScreen = document.getElementById('startScreen');
const gameScreen = document.getElementById('gameScreen');
const endScreen = document.getElementById('endScreen');
const playerNameInput = document.getElementById('playerName');
const startBtn = document.getElementById('startBtn');
const checkBtn = document.getElementById('checkBtn');
const resetBtn = document.getElementById('resetBtn');
const levelElement = document.getElementById('level');
const scoreElement = document.getElementById('score');
const questionCounterElement = document.getElementById('questionCounter');
const gameContent = document.getElementById('gameContent');
const messageElement = document.getElementById('message');
const finalTimeElement = document.getElementById('finalTime');
const answersListElement = document.getElementById('answersList');
const highscoreListElement = document.getElementById('highscoreList');
const nameErrorElement = document.getElementById('nameError');
const questionText = document.getElementById('questionText');

// –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
const sessionScreen = document.getElementById('sessionScreen');
const sessionIdElement = document.getElementById('sessionId');
const playersListElement = document.getElementById('playersList');
const countdownElement = document.getElementById('countdown');
const waitingMessageElement = document.getElementById('waitingMessage');

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
function showSessionScreen(sessionId, isHost) {
  startScreen.classList.add('hidden');
  sessionScreen.classList.remove('hidden');
  sessionIdElement.textContent = sessionId;
  
  if (isHost) {
    waitingMessageElement.textContent = "–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤... (–º–∞–∫—Å–∏–º—É–º 4)";
  } else {
    waitingMessageElement.textContent = "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...";
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
function updatePlayersList(players) {
  playersListElement.innerHTML = '';
  players.forEach((player, index) => {
    const playerElement = document.createElement('div');
    playerElement.className = 'player-item';
    playerElement.innerHTML = `
      <span class="player-name">${player.name}</span>
      <span class="player-status">${index === 0 ? 'üëë' : 'üë§'}</span>
    `;
    playersListElement.appendChild(playerElement);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
function updatePlayersProgress(players) {
  const opponentProgress = document.getElementById('opponentProgress');
  opponentProgress.innerHTML = '';
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const otherPlayers = players.filter(player => player.name !== playerName);
  
  otherPlayers.forEach(player => {
    const playerProgress = document.createElement('div');
    playerProgress.className = 'player-progress';
    
    const playerNameElement = document.createElement('div');
    playerNameElement.className = 'player-name-small';
    playerNameElement.textContent = player.name;
    
    const progressBar = document.createElement('div');
    progressBar.className = 'progress-bar';
    
    for (let i = 0; i < 20; i++) {
      const brick = document.createElement('div');
      brick.className = 'progress-brick';
      
      if (i < player.progress) {
        // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        const answer = player.answers[i];
        brick.classList.add(answer && answer.isCorrect ? 'correct' : 'incorrect');
      }
      
      progressBar.appendChild(brick);
    }
    
    playerProgress.appendChild(playerNameElement);
    playerProgress.appendChild(progressBar);
    opponentProgress.appendChild(playerProgress);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
function startCountdown(seconds, callback) {
  let count = seconds;
  countdownElement.textContent = `–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: ${count}—Å`;
  countdownElement.classList.remove('hidden');
  
  const countdownInterval = setInterval(() => {
    count--;
    countdownElement.textContent = `–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: ${count}—Å`;
    
    if (count <= 0) {
      clearInterval(countdownInterval);
      countdownElement.classList.add('hidden');
      callback();
    }
  }, 1000);
}

// –î–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function validateName(input) {
  const value = input.value.trim();
  if (value.length > 20) {
    input.value = value.substring(0, 20);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ —É–º–Ω–æ–∂–µ–Ω–∏–µ
function generateQuestions(difficulty) {
  const questions = [];
  let multiplier = [];
  let min, max;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  switch(difficulty) {
    case 'in8':
      min = 2;
      max = 30;
      multiplier = [8];
      break;
    case 'in17':
      min = 2;
      max = 30;
      multiplier = [17];
      break;
    case 'in35':
      min = 2;
      max = 30;
      multiplier = [35];
      break;
    default: // all
      min = 5;
      max = 20;
      multiplier = [5, 8, 11, 17, 17, 17, 35, 35];
  }
  
// –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const usedQuestions = new Set();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 20 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
  let attempts = 0;
  const maxAttempts = 100; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  
  while (questions.length < 20 && attempts < maxAttempts) {
    attempts++;
    
    const b = multiplier[Math.floor(Math.random() * multiplier.length)];
    const a = Math.floor(Math.random() * (max - min + 1)) + min;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º (–º–∞–∫—Å–∏–º—É–º 3 —Ü–∏—Ñ—Ä—ã)
    if (a * b > 999) {
      continue;
    }
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞
    const questionKey = `${a}-${b}`;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
    if (usedQuestions.has(questionKey)) {
      continue;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
    usedQuestions.add(questionKey);
    
    questions.push({
      question: `${a} √ó ${b} = ?`,
      correctAnswer: a * b
    });
  }
  
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤,
  // –¥–æ–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Å—Ç–∞ –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
  if (questions.length < 20) {
    const needed = 20 - questions.length;
    
    for (let i = 0; i < needed; i++) {
      const b = multiplier[Math.floor(Math.random() * multiplier.length)];
      const a = Math.floor(Math.random() * (max - min + 1)) + min;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
      if (a * b > 999) {
        i--; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
        continue;
      }
      
      questions.push({
        question: `${a} √ó ${b} = ?`,
        correctAnswer: a * b
      });
    }
  }
  
  return questions;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
function displayQuestion() {
  if (currentQuestion > 20) {
    endGame();
    return;
  }
  
  const question = questions[currentQuestion - 1];
  levelElement.textContent = currentQuestion;
  questionCounterElement.textContent = `${currentQuestion}/20`;
  if (questionText) questionText.textContent = question.question;

  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  setTimeout(() => {
    const answerInput = document.getElementById('answerInput');
    if (answerInput) answerInput.focus();
  }, 100);
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é checkAnswer() –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
async function checkAnswer() {
  const answerInput = document.getElementById('answerInput');
  const userAnswer = parseInt(answerInput.value);
  
  if (isNaN(userAnswer)) {
    messageElement.textContent = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!";
    answerInput.value = '';
    answerInput.focus();
    return;
  }
  
  const currentQ = questions[currentQuestion - 1];
  const isCorrect = userAnswer === currentQ.correctAnswer;
  
  const answerData = {
    question: currentQ.question,
    userAnswer: userAnswer,
    correctAnswer: currentQ.correctAnswer,
    isCorrect: isCorrect
  };
  
  answersHistory.push(answerData);
  
  if (isCorrect) {
    score++;
    scoreElement.textContent = score;
    messageElement.textContent = "–í–µ—Ä–Ω–æ!";
  } else {
    messageElement.textContent = `–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQ.correctAnswer}`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–µ—Å—Å–∏–∏
  if (currentSessionId) {
    try {
      await updatePlayerProgress(
        currentSessionId, 
        playerName, 
        currentQuestion, // –£–∂–µ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –Ω–∞ 1
        score, 
        answersHistory
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", error);
    }
  }
  
  currentQuestion++;
  
  setTimeout(() => {
    messageElement.textContent = "";
    if (currentQuestion > 20) {
      endGame();
    } else {
      displayQuestion();
    }
  }, 1000);
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer() {
  startTime = new Date();
  timerInterval = setInterval(updateTimer, 1000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
function updateTimer() {
  const currentTime = new Date();
  const elapsedTime = Math.floor((currentTime - startTime) / 1000);
  document.getElementById('nazvanie').textContent = `–í—Ä–µ–º—è: ${formatTime(elapsedTime)}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–º:—Å—Å
function formatTime(seconds) {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é endGame() –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
async function endGame() {
  isGameActive = false;
  clearInterval(timerInterval);
  
  if (gameStartTimeout) {
    clearTimeout(gameStartTimeout);
  }
  
  if (sessionUnsubscribe) {
    sessionUnsubscribe();
  }
  
  const endTime = new Date();
  const totalSeconds = Math.floor((endTime - startTime) / 1000);
  
  finalTimeElement.textContent = formatTime(totalSeconds);
  
  // –í —Ñ—É–Ω–∫—Ü–∏–∏ endGame –æ–±–Ω–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
  answersListElement.innerHTML = '';
  answersHistory.forEach((item, index) => {
    const li = document.createElement('li');
    li.classList.add(item.isCorrect ? 'correct' : 'incorrect');
    li.innerHTML = `
      <strong>${index + 1}.</strong> ${item.question.replace('?', '')}
      <br>
      <span class="answer-result">
        –í–∞—à –æ—Ç–≤–µ—Ç: ${item.userAnswer} 
        ${item.isCorrect ? 
          '<span class="result-icon">‚úì</span>' : 
          `<span class="result-icon">‚úó</span> (–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${item.correctAnswer})`
        }
      </span>
    `;
    answersListElement.appendChild(li);
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Firebase
  try {
    const saveSuccess = await saveGameResult(playerName, score, totalSeconds, gameDifficulty);
    if (!saveSuccess) {
      showError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.");
    }
  } catch (error) {
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: " + error.message);
  }
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –º—ã —Ö–æ—Å—Ç
  if (isHost && currentSessionId) {
    await endSession(currentSessionId);
  }
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  gameScreen.classList.add('hidden');
  endScreen.classList.remove('hidden');
  
  // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ beforeunload
  window.removeEventListener('beforeunload', confirmExit);
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
function confirmExit(e) {
  if (isGameActive) {
    e.preventDefault();
    e.returnValue = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É? –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.';
    return e.returnValue;
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ—Ä–¥–æ–≤
function displayHighscores(scores) {
  highscoreListElement.innerHTML = '';
  
  if (scores.length === 0) {
    highscoreListElement.innerHTML = '<p>–†–µ–∫–æ—Ä–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
    return;
  }
  
  scores.forEach((item, index) => {
    const div = document.createElement('div');
    div.className = 'highscore-item';
    div.innerHTML = `
      <span class="rank">${index + 1}.</span>
      <span class="name">${item.name}</span>
      <span class="score">${item.score}/20</span>
      <span class="time">${formatTime(item.time)}</span>
    `;
    highscoreListElement.appendChild(div);
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ –∏–∑ Firebase
async function loadHighscores(difficulty = 'all') {
  try {
    const scores = await getHighscores(difficulty, 5);
    displayHighscores(scores);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ—Ä–¥–æ–≤:", error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function handleDifficultyChange() {
  const difficultyRadios = document.getElementsByName('game');
  for (let radio of difficultyRadios) {
    if (radio.checked) {
      loadHighscores(radio.value);
      break;
    }
  }
}

// –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ input –¥–ª—è playerNameInput
playerNameInput.addEventListener('input', () => {
  validateName(playerNameInput);
  if (playerNameInput.value.trim()) {
    nameErrorElement.style.display = 'none';
  }
});

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function showError(message) {
  const errorModal = document.getElementById('errorModal');
  const errorMessage = document.getElementById('errorMessage');
  errorMessage.textContent = message;
  errorModal.classList.remove('hidden');
}

function hideError() {
  const errorModal = document.getElementById('errorModal');
  errorModal.classList.add('hidden');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
  displayVersion();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏–∑ localStorage
  const savedName = localStorage.getItem('playerName');
  if (savedName) {
    playerNameInput.value = savedName;
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  loadHighscores();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const errorModal = document.getElementById('errorModal');
  const closeModalBtn = errorModal.querySelector('.close');
  
  closeModalBtn.addEventListener('click', hideError);
  errorModal.addEventListener('click', (e) => {
    if (e.target === errorModal) hideError();
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç" - —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Å–µ—Å—Å–∏–∏
  startBtn.addEventListener('click', async () => {
    playerName = playerNameInput.value.trim();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∏–º—è
    if (!playerName) {
      nameErrorElement.style.display = 'block';
      playerNameInput.focus();
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
    if (playerName.length > 20) {
      nameErrorElement.textContent = "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤";
      nameErrorElement.style.display = 'block';
      playerNameInput.focus();
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ localStorage
    localStorage.setItem('playerName', playerName);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∏–º—è –≤–≤–µ–¥–µ–Ω–æ
    nameErrorElement.style.display = 'none';
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    const difficultyRadios = document.getElementsByName('game');
    for (let radio of difficultyRadios) {
      if (radio.checked) {
        gameDifficulty = radio.value;
        break;
      }
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
    // currentSessionId = playerName; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
    // –†–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω. –õ—É—á—à–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π ID:
    currentSessionId = Math.random().toString(36).substring(2, 8).toUpperCase();


    const existingSession = await getSession(currentSessionId);
    
    if (existingSession && existingSession.status === "waiting") {
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
      const success = await joinSession(currentSessionId, playerName);
      if (!success) {
        showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏");
        return;
      }
      isHost = false;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const success = await createSession(currentSessionId, playerName, gameDifficulty);
      if (!success) {
        showError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é");
        return;
      }
      isHost = true;
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      gameStartTimeout = setTimeout(async () => {
        await startSession(currentSessionId);
      }, 5000);
    }
    
    showSessionScreen(currentSessionId, isHost);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    sessionUnsubscribe = subscribeToSession(currentSessionId, (session) => {
      if (!session) return;
      
      players = session.players;
      updatePlayersList(players);
      
      if (session.status === "starting") {
        startCountdown(3, () => {
          startMultiplayerGame(session);
        });
      } else if (session.status === "active") {
        updatePlayersProgress(players);
      }
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
  checkBtn.addEventListener('click', checkAnswer);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞
  document.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !gameScreen.classList.contains('hidden')) {
      if (document.activeElement.id === 'answerInput' && isGameActive) {
        checkAnswer();
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–µ–º
        const answerInput = document.getElementById('answerInput');
        if (answerInput) answerInput.focus();
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–•–æ—Ä–æ—à–æ!" (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã)
  resetBtn.addEventListener('click', () => {
    endScreen.classList.add('hidden');
    startScreen.classList.remove('hidden');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∫–æ—Ä–¥–æ–≤
    loadHighscores(gameDifficulty);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ—Ä–¥–æ–≤
  const difficultyRadios = document.getElementsByName('game');
  for (let radio of difficultyRadios) {
    radio.addEventListener('change', handleDifficultyChange);
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–≥—Ä—ã
function startMultiplayerGame(session) {
  questions = generateQuestions(session.difficulty);
  currentQuestion = 1;
  score = 0;
  answersHistory = [];
  scoreElement.textContent = score;
  isGameActive = true;
  
  sessionScreen.classList.add('hidden');
  gameScreen.classList.remove('hidden');
  
  window.addEventListener('beforeunload', confirmExit);
  startTimer();
  displayQuestion();
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document.addEventListener('DOMContentLoaded', initGame);